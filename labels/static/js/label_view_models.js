// Generated by CoffeeScript 1.9.1
(function() {
  var CultivarSelectionViewModel, CultivarViewModel, IDNameViewModel, LabelEntry, LabelGeneratorViewModel, RootstockSelectionViewModel, RootstockViewModel, SpeciesSelectionViewModel, SpeciesViewModel, _easyData, ref, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.bbfan = (ref = root.bbfan) != null ? ref : {};

  _easyData = new bbfan.EasyRestData();

  SpeciesViewModel = (function() {
    function SpeciesViewModel(id, name) {
      this.id = id;
      this.name = name;
    }

    return SpeciesViewModel;

  })();

  SpeciesSelectionViewModel = (function() {
    function SpeciesSelectionViewModel() {
      this.available = ko.observableArray();
      this.selected = null;
    }

    return SpeciesSelectionViewModel;

  })();

  CultivarViewModel = (function() {
    function CultivarViewModel(id, name) {
      this.id = id;
      this.name = name;
    }

    return CultivarViewModel;

  })();

  RootstockViewModel = (function() {
    function RootstockViewModel(id, name) {
      this.id = id;
      this.name = name;
    }

    return RootstockViewModel;

  })();

  CultivarSelectionViewModel = (function() {
    function CultivarSelectionViewModel() {
      this.available = ko.observableArray();
      this.selected = null;
      this.add = (function(_this) {
        return function() {
          var n;
          _this.count += 1;
          n = new CultivarViewModel(_this.count);
          n.selected.subscribe(function(value) {
            var index;
            index = _this.selected.indexOf(n);
            if (value) {
              return _this.selected.push(n);
            } else if (index > -1) {
              return _this.selected.remove(n);
            } else {

            }
          });
          return _this.available.push(n);
        };
      })(this);
      this.removeSelected = (function(_this) {
        return function() {
          var i, len, n, ref1;
          ref1 = _this.selected_notifications();
          for (i = 0, len = ref1.length; i < len; i++) {
            n = ref1[i];
            _this.notifications.remove(n);
          }
          return _this.selected_notifications.removeAll();
        };
      })(this);
    }

    return CultivarSelectionViewModel;

  })();

  root.bbfan.CultivarSelectionViewModel;

  RootstockSelectionViewModel = (function() {
    function RootstockSelectionViewModel() {
      this.available = ko.observableArray();
      this.selected = null;
    }

    return RootstockSelectionViewModel;

  })();

  LabelEntry = (function() {
    function LabelEntry(species, cultivar, rootstock, startingCount) {
      this.species = species;
      this.cultivar = cultivar;
      this.rootstock = rootstock;
      this.count = startingCount;
      this.fullLabelName = '' + this.count + 'x ' + this.species.name + ' - ' + this.cultivar.name + ' on ' + this.rootstock.name + ' rootstock';
      this.incrementCount = (function(_this) {
        return function() {
          return _this.count += 1;
        };
      })(this);
      this.decrementCount = (function(_this) {
        return function() {
          if (_this.count > 1) {
            return _this.count -= 1;
          }
        };
      })(this);
    }

    return LabelEntry;

  })();

  IDNameViewModel = (function() {
    function IDNameViewModel(id, name) {
      this.id = id;
      this.name = name;
    }

    return IDNameViewModel;

  })();

  LabelGeneratorViewModel = (function() {
    var _cultivarsURL, _rootstocksURL, _speciesWithCultivarsURL;

    _speciesWithCultivarsURL = '/api/species/with_cultivars/';

    _cultivarsURL = '/api/cultivars?species=';

    _rootstocksURL = '/api/rootstocks?species=';

    function LabelGeneratorViewModel() {
      this.species = ko.observableArray();
      this.cultivars = ko.observableArray();
      this.rootstocks = ko.observableArray();
      this.labelEntries = ko.observableArray();
      this.count = ko.observable();
      this.speciesIDToIndex = {};
      this.cultivarIDToIndex = {};
      this.rootstockIDToIndex = {};
      this.selectedSpecies = ko.observable();
      this.selectedCultivar = ko.observable();
      this.selectedLabel = ko.observable();
      this.selectedRootstock = ko.observable();
      this.shouldShowRemoveLabelButton = false;
      this.addSpecies = (function(_this) {
        return function(id, name) {
          return _this.species.push(new IDNameViewModel(id, name));
        };
      })(this);
      this.addCultivar = (function(_this) {
        return function(id, name) {
          return _this.cultivars.push(new IDNameViewModel(id, name));
        };
      })(this);
      this.selectedLabel.subscribe = ((function(_this) {
        return function(newValue) {
          if (!newValue) {
            return _this.shouldShowRemoveLabelButton = false;
          } else {
            return _this.shouldShowRemoveLabelButton = true;
          }
        };
      })(this));
      this.removeLabel = (function(_this) {
        return function() {
          var selectedSpecies, species, speciesID;
          _this.selectedLabel = null;
          speciesID = _this.selectedSpecies()[0];
          selectedSpecies = null;
          return species = _this.get_by_id(_this.species(), _this.selectedSpecies()[0]);
        };
      })(this);
      this.get_by_id = (function(_this) {
        return function(dict, id) {
          var found, i, len, obj;
          found = null;
          for (i = 0, len = dict.length; i < len; i++) {
            obj = dict[i];
            if (obj.id === id) {
              found = obj;
              break;
            }
          }
          return found;
        };
      })(this);
      this.addLabel = (function(_this) {
        return function() {
          var cultivar, label, rootstock, selectedSpecies, species, speciesID;
          speciesID = _this.selectedSpecies()[0];
          selectedSpecies = null;
          species = _this.get_by_id(_this.species(), _this.selectedSpecies()[0]);
          cultivar = _this.get_by_id(_this.cultivars(), _this.selectedCultivar()[0]);
          rootstock = _this.get_by_id(_this.rootstocks(), _this.selectedRootstock()[0]);
          label = new LabelEntry(species, cultivar, rootstock, _this.count());
          return _this.labelEntries.push(label);
        };
      })(this);
      this.selectedSpecies.subscribe((function(_this) {
        return function(idArray) {
          var posID, url;
          posID = idArray[0];
          url = _cultivarsURL + posID;
          _easyData.getManyResults(url, function(objs) {
            var index;
            _this.cultivars.removeAll();
            _this.cultivarIDToIndex = {};
            index = 0;
            return _.each(objs, function(obj) {
              _this.cultivars.push(new IDNameViewModel(obj.id, obj.name));
              _this.cultivarIDToIndex[obj.id] = index;
              return index += 1;
            });
          });
          url = _rootstocksURL + posID;
          return _easyData.getManyResults(url, function(objs) {
            var index;
            _this.rootstocks.removeAll();
            _this.rootstockIDToIndex = {};
            index = 0;
            return _.each(objs, function(obj) {
              _this.rootstocks.push(new IDNameViewModel(obj.id, obj.name));
              _this.rootstockIDToIndex[obj.id] = index;
              return index += 1;
            });
          });
        };
      })(this));
      this.species.subscribe((function(_this) {
        return function(idArray) {
          var speciesID, url;
          speciesID = idArray[0];
          url = _speciesWithCultivarsURL + speciesID;
          return "$.get(url, (data)=>\n  @cultivars.removeAll()\n  _.each(data['species'], (obj)=>\n    @cultivars.push(new IDNameViewModel(obj.id, obj.name))\n  )\n)";
        };
      })(this));
    }

    return LabelGeneratorViewModel;

  })();

  root.bbfan.LabelGeneratorViewModel = LabelGeneratorViewModel;

}).call(this);

//# sourceMappingURL=label_view_models.js.map
